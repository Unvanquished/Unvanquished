#ifndef SPAWNER_COMPONENT_H_
#define SPAWNER_COMPONENT_H_

#include "../backend/CBSEBackend.h"
#include "../backend/CBSEComponents.h"

class SpawnerComponent: public SpawnerComponentBase {
	public:

		// ///////////////////// //
		// Autogenerated Members //
		// ///////////////////// //

		/**
		 * @brief Default constructor of the SpawnerComponent.
		 * @param entity The entity that owns the component instance.
		 * @param r_TeamComponent A TeamComponent instance that this component depends on.
		 * @param r_ThinkingComponent A ThinkingComponent instance that this component depends on.
		 * @note This method is an interface for autogenerated code, do not modify its signature.
		 */
		SpawnerComponent(Entity& entity, TeamComponent& r_TeamComponent, ThinkingComponent& r_ThinkingComponent);

		/**
		 * @brief Handle the Die message.
		 * @param killer
		 * @param meansOfDeath
		 * @note This method is an interface for autogenerated code, do not modify its signature.
		 */
		void HandleDie(gentity_t* killer, meansOfDeath_t meansOfDeath);

		// ///////////////////// //

		Entity *GetBlocker();

		void WarnBlocker(Entity& entity, bool lastWarning);

		bool IsBlocked() { return GetBlocker() != nullptr; }

		/**
		 * @brief A helper used by the components of specific spawners whether their spawn point is
		 *        or would be blocked.
		 *
		 */

		/**
		 * @brief A helper used by the components of specific spawners.
		 * @param spawnerNumber Entity number of an existing spawner.
		 * @param spawnerOrigin The origin of the spawner.
		 * @param spawnPoint The spawn point of the client.
		 * @param clientMins The minimum bounding box point of the client.
		 * @param clientMaxs The maximum bounding box point of the client.
		 * @return An entity that blocks the spawn or nullptr.
		 */
		static Entity* CheckSpawnPointHelper(
			int spawnerNumber, const glm::vec3 spawnerOrigin, const glm::vec3 spawnPoint,
			const glm::vec3 clientMins, const glm::vec3 clientMaxs
		);

	private:

		void OnLoss();

		void Think(int timeDelta);

		int blockTime;
};

#endif // SPAWNER_COMPONENT_H_
