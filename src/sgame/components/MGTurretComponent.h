#ifndef MGTURRET_COMPONENT_H_
#define MGTURRET_COMPONENT_H_

#include "../backend/CBSEBackend.h"
#include "../backend/CBSEComponents.h"

class MGTurretComponent: public MGTurretComponentBase {
	public:
		// ///////////////////// //
		// Autogenerated Members //
		// ///////////////////// //

		/**
		 * @brief Default constructor of the MGTurretComponent.
		 * @param entity The entity that owns the component instance.
		 * @param r_HumanBuildableComponent A HumanBuildableComponent instance that this component depends on.
		 * @param r_TurretComponent A TurretComponent instance that this component depends on.
		 * @note This method is an interface for autogenerated code, do not modify its signature.
		 */
		MGTurretComponent(Entity& entity, HumanBuildableComponent& r_HumanBuildableComponent, TurretComponent& r_TurretComponent);

		/**
		 * @brief Handle the PrepareNetCode message.
		 * @note This method is an interface for autogenerated code, do not modify its signature.
		 */
		void HandlePrepareNetCode();

		/**
		 * @brief Handle the PowerUp message.
		 * @note This method is an interface for autogenerated code, do not modify its signature.
		 */
		void HandlePowerUp();

		/**
		 * @brief Handle the PowerDown message.
		 * @note This method is an interface for autogenerated code, do not modify its signature.
		 */
		void HandlePowerDown();

		/**
		 * @brief Handle the Die message.
		 * @param killer
		 * @param meansOfDeath
		 * @note This method is an interface for autogenerated code, do not modify its signature.
		 */
		void HandleDie(gentity_t* killer, meansOfDeath_t meansOfDeath);

		// ///////////////////// //

	private:

		void Think(int timeDelta);

		bool CompareTargets(const glm::vec3& aimDirection, Entity& a, Entity& b);

		void Shoot();

		bool firing;

		int lastTargetSearch;
		int lastShot;
};

#endif // MGTURRET_COMPONENT_H_
