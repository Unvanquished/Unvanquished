#ifndef TELENODE_COMPONENT_H_
#define TELENODE_COMPONENT_H_

#include "../backend/CBSEBackend.h"
#include "../backend/CBSEComponents.h"

class TelenodeComponent: public TelenodeComponentBase {
	public:
		// ///////////////////// //
		// Autogenerated Members //
		// ///////////////////// //

		/**
		 * @brief Default constructor of the TelenodeComponent.
		 * @param entity The entity that owns the component instance.
		 * @param r_HumanBuildableComponent A HumanBuildableComponent instance that this component depends on.
		 * @param r_SpawnerComponent A SpawnerComponent instance that this component depends on.
		 * @note This method is an interface for autogenerated code, do not modify its signature.
		 */
		TelenodeComponent(Entity& entity, HumanBuildableComponent& r_HumanBuildableComponent, SpawnerComponent& r_SpawnerComponent);

		/**
		 * @brief Handle the CheckSpawnPoint message.
		 * @param blocker
		 * @param spawnPoint
		 * @note This method is an interface for autogenerated code, do not modify its signature.
		 */
		void HandleCheckSpawnPoint(Entity*& blocker, glm::vec3& spawnPoint);

		// ///////////////////// //

		/**
		 * @brief Checks whether spawning at a telenode at the given location is possible.
		 * @param spawnerNumber Entity number of an existing telenode.
		 * @param spawnerOrigin The origin of the telenode.
		 * @param spawnerNormal The normal of the telenode.
		 * @param blocker Set to an entity that blocks the telenode, or nullptr.
		 * @param spawnPoint Set to the asscoiated spawn point.
		 * @return Whether spawning from a telenode at the given location is currently possible.
		 */
		static bool CheckSpawnPoint(
			int spawnerNumber, const glm::vec3 spawnerOrigin, const glm::vec3 spawnerNormal, Entity*& blocker,
			glm::vec3& spawnPoint
		);

	private:

};

#endif // TELENODE_COMPONENT_H_
