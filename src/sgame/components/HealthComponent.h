#ifndef HEALTH_COMPONENT_H_
#define HEALTH_COMPONENT_H_

#include "../backend/CBSEBackend.h"
#include "../backend/CBSEComponents.h"

class HealthComponent: public HealthComponentBase {

	public:
		// ///////////////////// //
		// Autogenerated Members //
		// ///////////////////// //

		/**
		 * @brief Default constructor of the HealthComponent.
		 * @param entity The entity that owns the component instance.
		 * @param maxHealth An initialization parameter.
		 * @note This method is an interface for autogenerated code, do not modify its signature.
		 */
		HealthComponent(Entity& entity, float maxHealth);

		/**
		 * @brief Handle the PrepareNetCode message.
		 * @note This method is an interface for autogenerated code, do not modify its signature.
		 */
		void HandlePrepareNetCode();

		/**
		 * @brief Handle the Heal message.
		 * @param amount
		 * @param source
		 * @note This method is an interface for autogenerated code, do not modify its signature.
		 */
		void HandleHeal(float amount, gentity_t* source);

		/**
		 * @brief Handle the Damage message.
		 * @param amount
		 * @param source
		 * @param location
		 * @param direction
		 * @param flags
		 * @param meansOfDeath
		 * @note This method is an interface for autogenerated code, do not modify its signature.
		 */
		void HandleDamage(float amount, gentity_t* source, Util::optional<Vec3> location, Util::optional<Vec3> direction, int flags, meansOfDeath_t meansOfDeath);

		// ///////////////////// //

		void SetHealth(float health);
		void SetMaxHealth(float maxHealth, bool scaleHealth = false);

		/**
		 * @brief Copies state from another HealthComponent.
		 * @note Copies the current health's relative, not absolute value.
		 */
		HealthComponent& operator=(const HealthComponent& other);

		bool Alive() const { return health > 0.0f; }
		bool FullHealth() const { return health >= maxHealth; }
		float Health() const { return health; }
		float MaxHealth() const { return maxHealth; }
		float HealthFraction() const { return Math::Clamp(health / maxHealth, 0.0f, 1.0f); }

	private:

		float health;

		/**
		 * @brief Whenever health is restored, this makes sure the damage accounts are scaled down
		 *        so that they can't exceed the missing health.
		 */
		void ScaleDamageAccounts(float healthRestored);

		void SpawnHitNotification(gentity_t *attacker);
};

#endif // HEALTH_COMPONENT_H_
