<rml>
<head>
		<link type="text/rcss" href="/ui/shared/basics.rcss" />
		<link type="text/rcss" href="/ui/shared/circlemenu.rcss" />
		<link type="text/rcss" href="/ui/shared/infobox.rcss" />
<style>
	body {
		width: 100%;
		height: 100%;
		background: #00000066;
		text-align: center;
	}
	.circlemenu icon {
		display: inline-block;
		position: absolute;
		bottom: 0.3em;
		right: 0.75em;
		font-size: 1.7em;
	}
	.circlemenu button {
		image-color: red;
	}
	.circlemenu button.locked {
		decorator: image(/ui/assets/circlemenu/circle);
		image-color: rgb(50, 0, 0);
	}
	.circlemenu button.locked:hover {
		decorator: image(/ui/assets/circlemenu/circle);
		image-color: rgb(70, 0, 0);
	}
	.circlemenu button.locked:hover img,
	.circlemenu button.locked:hover icon,
	.circlemenu button.overmindfar:hover img,
	.circlemenu button.overmindfar:hover icon,
	.circlemenu button.expensive:hover img,
	.circlemenu button.expensive:hover icon {
		opacity: 1;
	}

	.circlemenu button.overmindfar img,
	.circlemenu button.locked img {
		opacity: 0.6;
	}
	.circlemenu button.overmindfar icon,
	.circlemenu button.locked icon {
		color: #ffffff;
		opacity: 0.6;
	}

	.circlemenu button.overmindfar,
	.circlemenu button.expensive {
		decorator: image(/ui/assets/circlemenu/circle);
		image-color: rgb(100, 0, 0);
	}
	.circlemenu button.overmindfar:hover,
	.circlemenu button.expensive:hover {
		decorator: image(/ui/assets/circlemenu/circle);
		image-color: rgb(120, 0, 0);
	}

	.circlemenu button.overmindfar img,
	.circlemenu button.expensive img {
		opacity: 0.6;
	}
	.circlemenu button.overmindfar icon,
	.circlemenu button.expensive icon {
		color: #c5000a;
		opacity: 0.7;
	}

	.circlemenu button {
		position: relative;
		image-color: red;
	}

	.circlemenu button.active {
		decorator: image(/ui/assets/circlemenu/circle-hover);
		image-color: rgb(150, 0, 0);
	}
	.circlemenu button.active:hover {
		decorator: image(/ui/assets/circlemenu/circle-hover);
		image-color: rgb(170, 0, 0);
	}
	.circlemenu button.active icon {
		color: #9affbd;
	}
	.circlemenu button.active .sell {
		display: none;
	}
	tabs {
		display: none;
	}
	#evolutionBackdrop {
		background-color: rgba(50, 0, 0, 26);
	}
</style>
<script src="lua/util.lua" />
<script src="lua/circle_menu.lua" />
<script>
	EvoMenu = CircleMenu:New('EvoMenu', 'evolve')
	function EvoMenu:PopulateItems()
		CDataSource.Build("alienEvolveList", "default")
		local evolutions = CDataSource.Read("alienEvolveList", "default", "icon,name,description,availability,price,visible,num")
		local i = 1
		while i <= #evolutions do
			if evolutions[i][6] ~= "true" then
				table.remove(evolutions, i)
			else
				i = i + 1
			end
		end
		self.items = evolutions
	end
	function EvoMenu:RMLButton(index)
		return string.format(
			'<button class="%s" onclick="%s:Click(%d, event)" onmouseover="%s:Hover(%d)">%s<img src="/%s"/></button>',
			self.items[index][4], -- availabilty
			self.handle, index,
			self.handle, index,
			AvailabilityIcon(self.items[index][4]), -- character
			self.items[index][1] -- image
		)
	end
	function EvoMenu:Select(index, event)
		local evo_id = tonumber(self.items[index][7])
		CDataSource.Build("alienEvolveList", "default")
		local data = CDataSource.Read("alienEvolveList", "default", "availability,cmdName")[evo_id]
		if data[1] == "available" then
			Cmd.exec("class " .. data[2])
			self:Quit(event)
		else
			event:StopPropagation()
		end
	end
	function EvoMenu:Highlight(index)
		if index == nil or index <= 0 then
			self.document:GetElementById("e_name").inner_rml = ""
			self.document:GetElementById("e_price").inner_rml = ""
			self.document:GetElementById("e_desc").inner_rml = ""
		else
			self.document:GetElementById("e_name").inner_rml = self.items[index][2]
			self.document:GetElementById("e_price").inner_rml = self.items[index][5]
			self.document:GetElementById("e_desc").inner_rml = self.items[index][3]
		end
	end
	function evoQuit(event)
		if EvoMenu then
			EvoMenu:Quit(event)
		end
	end
</script>
</head>
<body id="alien_evo" class="circlemenu alien" onkeydown="EvoMenu:HandleKey(event)" onshow="EvoMenu:Build(document)" onclick="evoQuit(event)">
<tabset class="circlemenu">
<tab><translate>Evolve</translate></tab>
<panel>
<div class="circlemenu-circle" id="evolveKeyboardHints"/>
<div class="circlemenu-circle" id="evolveMenu"/>
<div class="backdrop" id="evolveBackdrop" onmousemove="EvoMenu:BackdropCapture(event)" onclick="event:StopPropagation()" onmouseup="EvoMenu:BackdropClick(event)"/>
<div class="infobox">
<h2 id="e_name"></h2>
<p class="text">
<!--Price: -->
<!-- FIXME: We may want to include <span id="e_price"/> in the translatable string, maybe with a specific markup to make it easy. -->
<span id="e_price"/>&nbsp;<translate>morph points</translate>
<br /><span id="e_desc"/></p>
</div>
</panel>
</tabset>
</body>
</rml>
