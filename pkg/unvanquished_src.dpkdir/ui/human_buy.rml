<rml>
	<head>
		<link type="text/rcss" href="/ui/shared/basics.rcss" />
		<link type="text/rcss" href="/ui/shared/circlemenu.rcss" />
		<link type="text/rcss" href="/ui/shared/infobox.rcss" />
		<style>
			body {
				width: 100%;
				height: 100%;
				background: #00000066;
				text-align: center;
			}

			.circlemenu icon {
				display: inline-block;
				position: absolute;
				bottom: 0.3em;
				right: 0.75em;
				font-size: 1.7em;
			}
			.circlemenu button {
				image-color: #83fff5;
			}
			.circlemenu button.locked {
				decorator: image(/ui/assets/circlemenu/circle);
				image-color: rgb(0, 100, 100);
			}
			.circlemenu button.locked:hover {
				decorator: image(/ui/assets/circlemenu/circle);
				image-color: rgb(0, 120, 120);
			}
			.circlemenu button.locked:hover img,
			.circlemenu button.locked:hover icon,
			.circlemenu button.expensive:hover img,
			.circlemenu button.expensive:hover icon {
				opacity: 1;
			}
			.circlemenu button.locked img {
				opacity: 0.6;
			}
			.circlemenu button.locked icon {
				color: #ffffff;
				opacity: 0.6;
			}

			.circlemenu button.expensive {
				decorator: image(/ui/assets/circlemenu/circle);
				image-color: rgb(0, 150, 150);
			}
			.circlemenu button.expensive:hover {
				decorator: image(/ui/assets/circlemenu/circle);
				image-color: rgb(0, 170, 170);
			}

			.circlemenu button.expensive img {
				opacity: 0.6;
			}
			.circlemenu button.expensive:hover img {
				opacity: 1;
			}
			.circlemenu button.expensive icon {
				color: #0a00c5;

				opacity: 0.7;
			}

			.circlemenu button {
				position: relative;
			}

			.circlemenu button.active {
				decorator: image(/ui/assets/circlemenu/circle-hover);
				image-color: rgb(0, 200, 200);
			}
			.circlemenu button.active:hover {
				decorator: image(/ui/assets/circlemenu/circle-hover);
				image-color: rgb(0, 220, 220);
			}
			.circlemenu button.active icon {
				color: #9affbd;
			}
			.circlemenu button.active .sell {
				display: none;
			}

			.tabkey {
				background-color: #99999999;
				color: #cccccc;
				font-size: 0.8em;
				line-height: 1.1em;
				padding-left: 0.1em;
				padding-right: 0.1em;
				border-top-width: 0.1em;
				border-bottom-width: 0.1em;
				border-right-width: 0.1em;
				border-left-width: 0.1em;
				border-top-color: #cccccc;
				border-bottom-color: #cccccc;
				border-right-color: #cccccc;
				border-left-color: #cccccc;
				display: block;
			}
			tab:selected .tabkey {
				display: none;
			}
			tab {
				position: relative;
				display: inline-block;
				top: 0.4em;
			}
			tab:selected {
				top: 0;
			}
			#upgradeBackdrop,
			#weaponBackdrop {
				background-color: rgba(0, 200, 200, 26);
			}
		</style>
		<script>
			WeaponMenu = CircleMenu:New('WeaponMenu', 'weapon')
			function WeaponMenu:PopulateItems()
				CDataSource.Build("armouryBuyList", "weapons")
				self.items = CDataSource.Read("armouryBuyList", "weapons", "icon,name,description,price,availability,rate,range,damage")
			end
			function WeaponMenu:RMLButton(index)
				return string.format(
					'<button class="%s" onclick="%s:Click(%d,event)" onmouseover="%s:Hover(%d)">%s<img src="/%s"/></button>',
					self.items[index][5], self.handle, index, self.handle, index, AvailabilityIcon(self.items[index][5]), self.items[index][1]
				)
			end
			function WeaponMenu:Select(index, event)
				-- Query again in case credits/momentum changed
				CDataSource.Build("armouryBuyList", "weapons")
				local data = CDataSource.Read("armouryBuyList", "weapons", "availability,cmdName")[index]
				if data[1] == "available" then
					Cmd.exec("buy +" .. data[2])
				elseif data[1] == "active" then
					Cmd.exec("sell " .. data[2])
				end
				event:StopPropagation()
			end
			function WeaponMenu:Highlight(index)
				if index == nil or index <= 0 then
					self.document:GetElementById("w_name").inner_rml = ""
					self.document:GetElementById("w_price").inner_rml = ""
					self.document:GetElementById("w_rate").style.width = "0"
					self.document:GetElementById("w_range").style.width = "0"
					self.document:GetElementById("w_damage").style.width = "0"
					self.document:GetElementById("w_description").inner_rml = ""
				else
					local data = self.items[index]
					self.document:GetElementById("w_name").inner_rml = data[2]
					self.document:GetElementById("w_price").inner_rml = data[4]
					self.document:GetElementById("w_rate").style.width = data[6] .. '%'
					self.document:GetElementById("w_range").style.width = data[7] .. '%'
					self.document:GetElementById("w_damage").style.width = data[8] .. '%'
					self.document:GetElementById("w_description").inner_rml = data[3]
				end
			end
			UpgradeMenu = CircleMenu:New('UpgradeMenu', 'upgrade')
			function UpgradeMenu:PopulateItems()
				CDataSource.Build("armouryBuyList", "upgrades")
				self.items = CDataSource.Read("armouryBuyList", "upgrades", "icon,name,description,price,availability")
			end
			function UpgradeMenu:RMLButton(index)
				return string.format(
				'<button class="%s" onclick="%s:Click(%d,event)" onmouseover="%s:Hover(%d)">%s<img src="/%s"/></button>',
				self.items[index][5], self.handle, index, self.handle, index, AvailabilityIcon(self.items[index][5]), self.items[index][1]
				)
			end
			function UpgradeMenu:Select(index, event)
				-- Query again in case credits/momentum changed
				CDataSource.Build("armouryBuyList", "upgrades")
				local data = CDataSource.Read("armouryBuyList", "upgrades", "availability,cmdName")[index]
				if data[1] == "available" then
					Cmd.exec("buy +" .. data[2])
				elseif data[1] == "active" then
					Cmd.exec("sell " .. data[2])
				end
				event:StopPropagation()
			end
			function UpgradeMenu:Highlight(index)
				if index == nil or index <= 0 then
					self.document:GetElementById("u_name").inner_rml = ""
					self.document:GetElementById("u_price").inner_rml = ""
					self.document:GetElementById("u_description").inner_rml = ""
				else
					local data = self.items[index]
					self.document:GetElementById("u_name").inner_rml = data[2]
					self.document:GetElementById("u_price").inner_rml = data[4]
					self.document:GetElementById("u_description").inner_rml = data[3]
				end
			end
			ignoreEvent = nil
			function UpgradeMenu:SwitchTo(document, event)
				-- WeaponMenu.ignoreEvent = event
				ignoreEvent = event
				UpgradeMenu:Build(document)
			end
			function WeaponMenu:SwitchTo(document, event)
				-- UpgradeMenu.ignoreEvent = event
				ignoreEvent = event
				WeaponMenu:Build(document)
			end
			function HumanBuyHandleKey(event, document)
				local tabset = Element.As.ElementTabSet(document:GetElementById("tabset"))
				if event.parameters.key_identifier == rmlui.key_identifier.TAB then
					tabset.active_tab = tabset.active_tab + 1 <= tabset.num_tabs and tabset.active_tab + 1 or 1
				else
					local menu = ({[1]=WeaponMenu, [2]=UpgradeMenu})[tabset.active_tab]
					menu:HandleKey(event)
				end
			end
			function buyQuit(event, document)
				if ignoreEvent == event then
					return
				end
				if WeaponMenu then
					WeaponMenu:Quit(event)
					return
				end
				if UpgradeMenu then
					UpgradeMenu:Quit(event)
					return
				end
			end
		</script>
	</head>
	<body id="human_buy" class="circlemenu human" onkeydown="HumanBuyHandleKey(event, document)" onclick="buyQuit(event, document)"
	 onshow="WeaponMenu:Build(document) UpgradeMenu:Build(document)"
	 onrefreshdata="WeaponMenu:Build(document) UpgradeMenu:Build(document)">
	<tabset class="circlemenu" id="tabset">
		<tab onclick="WeaponMenu:SwitchTo(document, event)">
			<span><translate>Weapons</translate></span>
			<div class="tabkey"><translate>TAB</translate></div>
		</tab>
		<panel>
		<div class="circlemenu-circle" id="weaponKeyboardHints"/>
		<div class="circlemenu-circle" id="weaponMenu"/>
		<div class="backdrop" id="weaponBackdrop" onmousemove="WeaponMenu:BackdropCapture(event)" onclick="event:StopPropagation()" onmouseup="WeaponMenu:BackdropClick(event)"/>
			<div class="infobox">
			<h2 id="w_name"></h2>
			<p><div class="attr"><translate>Price:</translate></div><div class="bar"><div id="w_price"></div></div></p>
			<p><div class="attr"><translate>Range:</translate></div><div class="bar"><div id="w_range" class="barValue"></div></div></p>
			<p><div class="attr"><translate>Damage:</translate></div><div class="bar"><div id="w_damage" class="barValue"></div></div></p>
			<p><div class="attr"><translate>Fire Rate:</translate></div><div class="bar"><div id="w_rate" class="barValue"></div></div></p>
			<p class="text" id="w_description"></p>
			</div>
		</panel>
		<tab onclick="UpgradeMenu:SwitchTo(document, event)">
			<span><translate>Upgrades</translate></span>
			<div class="tabkey"><translate>TAB</translate></div>
		</tab>
		<panel>
		<div class="circlemenu-circle" id="upgradeKeyboardHints"/>
		<div class="circlemenu-circle" id="upgradeMenu"/>
		<div class="backdrop" id="upgradeBackdrop" onmousemove="UpgradeMenu:BackdropCapture(event)" onclick="event:StopPropagation()" onmouseup="UpgradeMenu:BackdropClick(event)"/>
			<div class="infobox">
			<h2 id="u_name"></h2>
			<p><div class="attr"><translate>Price:</translate></div><div class="bar"><div id="u_price"></div></div></p>
			<p class="text" id="u_description"></p>
			</div>
		</panel>
	</tabset>
	</body>
</rml>
